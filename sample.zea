
! zeasm:   the programming language (reverse polish notation)
! ! is comments (till the end of line)
! only digits, lower case letters and ,;:.?!"()'-
! 

include "std.zea"

! function declaration
func hello value;


! a module array of integer
data ar 0,1,2,3,4,5,? ! ? skips blank characters and comments
	6,7,8,9,?
	10,11,12;

!  module arrays of bytes 
data bar '-abcdefghijklmno'; 	! eight bytes

data str "abc";		! four bytes (strings are nul terminated)

class myclass: 
! fields
var avalue;
var arrr;
var bptr;
wire logic; 	! for hardware desciption language

! methods
func new:
	sizeof myclass;
	new;
	set this;

	new 1024; 
	store this.arrr;
	load this.arrr;
	store this.bptr;  ! now arrr and bptr point to the same memory

	return this; ! we return the value on the compute stack
end;

func dispose:
	load this.arrr;
	delete;
	get this;
	delete;
	return 0;
end;

! recusive call while a is greater than zero
func methoda a,b:
	var aa;

	sub a 1; ! add sub mul div rem

	set aa;
	gt aa 0; ! eq ne lt gt le ge
	if true (
		this.method aa b;
		return;
	);
	return 0;
end;

end class; ! end of class myclass

func main argc,argv:
	var tmp;	! a local variable (integer or pointer to array)
	class myclass obj;	! a pointer to object of type "myclass"
	bytes bs;		! a pointer to byte

	obj.new;	! instantiate an object (this pointer is null) and push
			! it to the stack
	set obj; 	! get it and assign it

	load obj.bptr
	set bs;
	store bs(0) 21; ! set byte zero of obj.bptr to twenty-one

	obj.methoda 15, -3; ! call method
	drop;
	store obj.avalue 1;
	drop obj.dispose;	

	! invert bit zero of argc
	getb argc 0;
	if true (
		clrb argc 0;
	) else (
		setb argc 0;
	);

	!invert trit two of argc
	gett argc 2;
	if true (
		minust argc 2;
	} false (
		plust argc 2;
	) else (
		! zerot argc 2;
	);

	gt argc 1;
	if true (
		println "too many arguments";
		exit -1;
	) else (
		eq argc 1;
		if true (
			println "hello world";
		) else (
			println "panic";
		);
	);

	! numerical constants
	set tmp 9000000000000;
	mul 3 tmp;
	drop;

	set tmp "a string";
	print "program name equals ";
	println argv(0); ! array access
	println tmp;

	get tmp;
	loop (
		sub tmp 1;
		set tmp;
		gt tmp 0;
		if true (
			continue;
		) else (
			break;
		);
		printv tmp;
		println;
	);

	hello tmp; 
	drop;

	print '-m-j--';	! byte string. - is zero, a is one 
			! binary : - abcde fghij klmno 
			! m thirteen, o  fifteen, j ten
		   	! we print  carriage return and new line characters
			! balanced ternary : zyx wvuts rqpon - abcde fghij klm

	set tmp "hello";
	set tmp '--';
	
	exit 0;
	return 0;
end;

! function definition
func hello value:
	println "the value of value is ";
	printv value;
	println;
	return 0;
end;



