
! zeasm:   the programming language (reverse polish notation)
! ! is comments (till the end of lien)
! only digits, lower case letters and ,;:.?!"()'-
! 

include "std.zea"

! function declaration
func hello value;


! a global array of integer
array ar 0,1,2,3,4,5,? ! ? skips blank characters and comments
	6,7,8,9,?
	10,11,12;

!  global arrays of bytes 
bytes bar '-abcdefghijklmno'; 	! eight bytes

bytes str "abc";		! four bytes (strings are nul terminated)

class myclass: 
! fields
var avalue;
var arrr;
var bptr;
wire logic; 	! for hardware desciption language

! methods
func new:
	sizeof myclass;
	new bytes;
	pop this;

	push 1024; 
	new array; 
	set this.arrr ans;
	pop this.bptr;  ! now arrr and bptr point to the same memory

	push this; ! we return the value on the compute stack
end;

func dispose:
	push this.arrr;
	delete;
	push this;
	delete;
end;

! recusive call while a is greater than zero
func methoda a,b:
	push a;
	push 1;
	sub;
	if ans:gt(this.methoda ans,b);:;
	! here the value of "a" is not valid since method or function calls
	! with arguments overwrite the memory allacates for arguments.
	pop;
end;

end class; ! end of class myclass

func main argc,argv:
	var tmp;	! a local variable (integer or pointer to array)
	class myclass obj;	! a pointer to object of type "myclass"
	bytes bs;		! a pointer to byte

	obj.new;	! instantiate an object (this pointer is null) and push
			! it to the stack
	pop obj; 	! get it and assign it

	set bs obj.bptr;
	set bs(0) 21; ! set byte zero of obj.bptr to twenty-one

	obj.methoda 15, -3; ! call method
	set obj.avalue 1;
	obj.dispose;	

	! invert bit zero of argc
	getb tmp argc 0;
	if tmp: 
		eq(setb argc 0);
		ne(clrb argc 0);
	:;

	!invert trit two of argc
	gett tmp argc 2
	if tmp:
		lt(post argc 2);
		eq(clrt argc 2);
		gt(negt argc 2);
	:;

	push argc;
	push 1;
	sub;

	if ans:
		gt ( 
			println "too many arguments";
			exit -1;
		);
		eq (println "hello world");
		lt (println "panic");
		ne (
			print "argc value is: ";
			printv argc;
			println;
		);
		ge (println "greater or equal");
		le (
			println "less or equal";
		);
	:; ! end of if

	! numerical constants
	set tmp 9000000000000;
	pop tmp;
	set tmp 2;
	push tmp;
	push ans;
	mul;

	set tmp "a string";
	print "program name equals ";
	println argv(0); ! array access
	println tmp;

	push 4;
	div;
	push 5;
	add;
	push 5;
	mod;
	push 1;
	sub;
	pop;

	push tmp;
	loop:
		push 1;
		sub;
		if ans: 		! ans is the top of the stack
			eq(break);
			gt(continue);
		:;
		printv ans;
		println;
	:;

	hello tmp; 

	print '-m-j--';	! byte string. - is zero, a is one 
			! binary : - abcde fghij klmno 
			! m thirteen, o  fifteen, j ten
		   	! we print  carriage return and new line characters
			! balanced ternary : zyx wvuts rqpon - abcde fghij klm

	set tmp "hello";
	set tmp '--';
	
	exit 0;
end;

! function definition
func hello value:
	println "the value of value is ";
	printv value;
	println;
end;



