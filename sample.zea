
! zeasm:   the programming language (reverse polish notation)

! only lower case letters and ,;:.?!"()'-
! 

include "std.zea"

! function declaration
func hello value;


! a global array of integer
array ar zero,one,two,three,four,five,? ! ? skips blank characters and comments
	six, seven, eight, nine,?
	ten, eleven, twelve;

!  global arrays of bytes 
bytes bar '-abcdefghijklmno'; 	! eight bytes

bytes str "abc";		! four bytes (strings are nul terminated)

class myclass: 
! fields
var avalue;
var arrr;
var bptr;

! methods
func new:
	sizeof myclass;
	new bytes;
	pop this;

	push hundred twenty-eight; 
	new array; 
	set this.arrr ans;
	pop this.bptr;  ! arrr and bptr point to the same memory

	push this; ! return 
end;

func dispose:
	push this.arrr;
	delete;
	push this;
	delete;
end;

! recusive call while a is greater than zero
func methoda a,b:
	push a;
	push one;
	sub;
	if ans: gt this.methoda ans, b; end;
	pop;
end;

end; ! end of class myclass

func main argc,argv:
	var tmp;	! a local variable (integer or pointer to array)
	class myclass obj;	! a pointer to object of type "myclass"
	bytes bs;		! a pointer to byte

	obj.new;	! instantiate an object (this pointer is null) and push
			! it to the stack
	pop obj; 	! assign

	set bs obj.bptr;
	set bs(zero) twenty-one;

	obj.methoda fifteen, minus three;
	set obj.avalue eleven;
	obj.dispose;	

	push argc;
	push one;
	sub;

	if ans:
		gt ( 
			println "too many arguments";
			return minus one;
		);
		eq println "hello world";
		lt println "panic";
		ne (
			print "argc value is: ";
			printv argc;
			println;
		);
		ge println "greater or equal";
		le (
			println "less or equal":
		);
	end; ! end of if

	! numerical constants
	set tmp trillion billion million thousand hundred fifty six;
	set tmp ten;
	set tmp zero;
	set tmp two thousand twenty-four;
	set tmp seven hundred twenty-one ? 
		million five hundred sixty-three; ! multi line
	set tmp eleven;
	set tmp twelve;
	set tmp fourteen;
	set tmp fifteen;
	set tmp sixteen;
	set tmp seventeen;
	set tmp eighteen;
	set tmp nineteen;
	set tmp twenty-two;
	set tmp thirty-three;
	set tmp forty-four;
	set tmp sixty-five;
	set tmp seventy-seven;
	set tmp eighty-eight;
	set tmp ninety-nine;
	pop tmp;
	set tmp two;
	push tmp;
	push ans;
	mul;

	set tmp "a string";
	print "program name equals ";
	println argv(zero); ! array access
	println tmp;

	push four;
	div;
	push five;
	add;
	push five;
	mod;
	push one;
	sub;
	pop;

	push tmp;
	loop:
		push one;
		sub;
		if ans: 		! ans is the top of the stack
			eq break;
			gt continue;
		end;
		printv ans;
		println;
	end;

	hello tmp; 

	print '-m-j--';	! byte string. - is zero, a is one 
			! binary : - abcde fghij klmno 
			! m thirteen, o  fifteen, j ten
		   	! we print  carriage return and new line characters
			! balanced ternary : zyx wvuts rqpon - abcde fghij klm

	set tmp "hello";
	set tmp '--';
	
	push zero;
	exit;
end;

! function definition
func hello value:
	println "the value of value is ";
	printv value;
	println;
end;



