
# comment

include "../src/std.3p"
include "spec1.3p"

define MY_CONST 3 		# defs

array array_of_integer { 	# global
	1, 2, 3, 4
}
bytes array_of_bytes {
	65,66,67,68,69,0
}

func four_args (a,b,c,d)
{
	return 0
}

class my_struct {
field one
field next
field three
field four

# args[0]: this
method init () {
	set one 1
	set next null
	set three 3
	set four "four!"
}

# args[0]: this
method dispose () {
	print "delete this=0A"
	delete this
	print "ok=0A"
}

method print_this () {
	print "this pointer: "
	print10 this
	print "=0A"
}


# args[0]: this
# args[1]: increment value
method do_something (inc) {
	var s, tmp
	set next next + inc
	print "=0A"
	print10 next
	print "=0A"
	this.print_this

	set s {file__size "README.md"}
	print "=0A"
	print10 s
	print "=0A"
	print10 {file__size "README.md"}
	print "=0A"
	print four
	print " "
	print10 {str_cmp four "four! "}
	print "=0A";
	set tmp {file__load "README.md" 0 {file__size "README.md"}}
	print tmp
	delete tmp
	set tmp {folder__list(".")}
	print "FOLDER:=0A"
	print tmp
	delete tmp
	four_args "bin/test.txt" -1 "hello" 3
	file__save "bin/test.txt" -1 "hello" 3
	file__save "bin/test.txt" 7 "!" 1

	set s {str_dup "=0A=0AYo!"}
	print s
	delete s
	print array_of_bytes
	print10 array_of_integer[1]
	print "=0A";
	print_hi
	print "=0A"

	return one
}

method call_hello() {
	print "This should be 0: "
	print10 this
	print "=0A"
	hello_world
}

} # end of class my_struct


# args[0]: command line argument count
# args[1]: array of string of each arguments
func startup (argc, argv) {
	var x, str, a, b, f
	ref my_struct s
	
	print argv[0]
	print argv[1]

	set x MY_CONST

	set str "A string litteral =
YO=0A =
multi-line=0A"

	set a {new array 10} # alloc an array of 10 words
	set b {new bytes 3} # alloc 3 bytes
 
	set s {new my_struct} # alloc a class
	s.init

	print str

	set a[x] 25
	set a[0] a[x]
	set a[1] 1 + 2 - 3
	set a[1] 1 + 2 - (-3 * 4) / 5 % 6
	set a[1] 12 * 5+(5 * (32 - 4)) + 3 - 203  
	check_zero a[1]
	set a[1] ((3 *(2*x+1)) / 2) - 10
	check_zero a[1]
	set a[1] ((1 *(2*4++3))) - 11
	check_zero a[1]
	set a[1] 1--2 - 3
	check_zero a[1]
	set a[1] 1-+2  + 1
	check_zero a[1]
	set a[1] 3*4+5 - 17
	check_zero a[1]
	set a[1] 3+4*5 - 23
	check_zero a[1]
	set a[1] 3*(4+5) - 27
	check_zero a[1]
	set a[1] 3*(4--5) - 27
	check_zero a[1]


	poke b 0 'A' 			# ascii 'A'
	poke b 1 ({peek b 0} + 2) 	# ascii 'C'
	poke b 2 0			# nil: end of string
	print b     			# print AC

	print "=0A"
	hello_world
	print "=0A"
	set f s.call_hello 	# we can only assign methods to variables, not functions
	f null			# indirect call of method with NULL "this"

	print10 {ret_ten} # call the ret_ten function and print the returned value

	print "=0A"
	if x - 5 ?
		> {print "x greater than 5"},
		< {print "x less than 5"},
		~ {print "x equal 5"};

	print "=0A"
	if x ?
		1 {print "x =3D 1"},
		2 3 5 {print "x =3D 2"},
		-20 {print "x =3D -20"},
		'A' 'B' 'C' 'D' {print "x =3D A"},
		<> {print "x not equal zero"},
		>~ {print "x greater or equal zero"},
		<~ {print "x less than or equal zero"}
	;
	print "=0A is 7 =3D "
	print10 (1+2*3)
	print "=0A"
	print10 ((1+2)*3)
	print "=0A"
	loop { 	# loop while x greater than 0
		if x ? <~ {break};
		print10 x
		print "=0A"
		set x x - 1
		if x - 2 ? <~ {continue}; # skip and loop if x is less than 3
		if x - 2 ? < {break};	# stop loop if x is less than 4
	};

	s.do_something 7
	s.dispose

	print "=0A program "
	print argv[0]
	print " is terminated=0A"

	command 0 "ref my_struct x;x.call_hello;            " 30 
	set s {singleton}
	print10 s[0]
	print "=0A"
	return 0
}


func check_zero(z)
{
	if (z) ? <>{
		print10 z;
		print " <> 0 !! ERROR ERROR ERROR ERROR ERROR=0A"; 
		quit -1
	};
}

func hello_world() {
	print "Hello World!=0A"
}

func ret_ten () {
	return 10
}


