//                  3o3 ternary cpu assembler
//
//          MMXXIV November 17 PUBLIC DOMAIN by JML
//
//     The authors and contributors disclaim copyright, patents
//           and all related rights to this software.
//
// Anyone is free to copy, modify, publish, use, compile, sell, or
// distribute this software, either in source code form or as a
// compiled binary, for any purpose, commercial or non-commercial,
// and by any means.
//
// The authors waive all rights to patents, both currently owned
// by the authors or acquired in the future, that are necessarily
// infringed by this software, relating to make, have made, repair,
// use, sell, import, transfer, distribute or configure hardware
// or software in finished or intermediate form, whether by run,
// manufacture, assembly, testing, compiling, processing, loading
// or applying this software or otherwise.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT OF ANY PATENT, COPYRIGHT, TRADE SECRET OR OTHER
// PROPRIETARY RIGHT.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
// ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

include "std.ri";
include "sym.ri";

struct as (
	in,
	insize,
	inpos,
	line,
	tmp,
	syms
);

as__init(self, a);
as__new()
(
	%self,a;
	self = struct(as);
	a = struct(sym);
	self.as.syms = a;
	self.as.tmp = bytes(2);
	as__init(self, a);
	return self;
)

as__dispose(self)
(
	free(self.as.tmp);
	free(self);
)

as__load(self, src)
(
	self.as.insize = file_size(src);
	switch (self.as.insize < 1) (
	1:(print("invalid source file\n");
		exit(-1);));

	self.as.in = file_load(src, self.as.insize);
	switch (self.as.in) (
	0:-1:(print("cannot load source file\n");
		exit(-1);));
	return 0;
)

as__print(self, name, len)
(
	%i,tmp;
	i = 0;
	tmp = self.as.tmp;
	while (i < len) (
		poke(tmp,0,peek(name, i));
		print(tmp);
		i = i + 1;
	);
	
)

as__whitespaces(self)
(
	%s,b,c, done;
	s = self.as.inpos - 1;
	b = self.as.in;
	done = 0;
	while (!done) (
		s = s + 1;
		c = peek(b,s);
		done = 1;
		switch(c) (
		' ':'\t':'\r': (done = 0;),
		';': (
			while (c != '\n' && c != '\0') (
				s = s + 1;
				c = peek(b,s);
			);
		)
		);
	);
	self.as.inpos = s;
	return c;
)


as__code32(self)
(
	print("CODE32\n");
)


as__identifier(self, name, len)
(
	%i,s,t,v;
	as__print(self, name, len);
	switch (len < 1) (
	1: (return -1;)
	);
	s = self.as.syms;
	i = sym__get_index(s, name, len);
	print2(i);
	print("\n");
	switch(i >= 0) (
	1: (
		t = sym__get_type(s, i);
		v = sym__get_value(s, i);
		switch(t) (
		0:(),
		1:( return v.(self);)
		);
	),
	0:-1:()
	);
	print("#error at line ");
	print2(self.as.line);
	print(" '");
	as__print(self, name, len);
	print("' unknown!\n");
	self.as.inpos = self.as.inpos + len;
	return -1;
)

as__token(self)
(
	%s,so,l,b,c, done;
	so = self.as.inpos;
	s = so - 1;
	b = self.as.in;
	done = 0;
	while (!done) (
		s = s + 1;
		c = peek(b,s);
		switch(c) (
		' ':'\t':'\r':'\n': (done = 1;),
		';': ( done = 1;),
		',': ( done = 1;)
		);
	);
	self.as.inpos = s;
	l = s - so;
	as__identifier(self, self.as.in + so, l);	
	return 0;
)


as__line(self)
(
	%done;
	self.as.line = self.as.line + 1;
	done = 0;
	as__whitespaces(self);
	c = as__token(self);
	switch (peek(self.as.in, self.as.inpos)) (
	'\n': (
		self.as.inpos = self.as.inpos + 1;
		done = 1;
	),
	'\0': (
		done = 1;
	));
	switch (!done) (
	1:(
		print("#error at line ");
		print2(self.as.line);
		print("!\n");
		exit(-1);
	));
	print2(self.as.line);
	print(":\n");
)

as__assemble(self, dst)
(
	self.as.inpos = 0;
	self.as.line = 0;
	while (self.as.inpos < self.as.insize) (
		as__line(self);
	);
	return 0;
)
as__init(self, a)
(
	%f,n;
	n = ".code32"; f = as__code32; sym__add(a, n, 1, f);
)


startup(argc, argv) 
(
	%app;

	switch (argc != 4) (
	1: (
		print("usage: ");
		print(argv[0]);
		print(" -o prog.raw src.asm\n");
		return -1;
	));
	
	switch (strcmp(argv[1], "-o")) (
	1: (
		print("first command line argument must be -o\n");
		return -1;
	)); 
	app = as__new();
	as__load(app, argv[3]);
	as__assemble(app, argv[2]);
	as__dispose(app);
	return 0;
)
